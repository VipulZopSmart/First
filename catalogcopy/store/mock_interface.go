// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	model "awesomeProject/catalog/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBrand is a mock of Brand interface
type MockBrand struct {
	ctrl     *gomock.Controller
	recorder *MockBrandMockRecorder
}

// MockBrandMockRecorder is the mock recorder for MockBrand
type MockBrandMockRecorder struct {
	mock *MockBrand
}

// NewMockBrand creates a new mock instance
func NewMockBrand(ctrl *gomock.Controller) *MockBrand {
	mock := &MockBrand{ctrl: ctrl}
	mock.recorder = &MockBrandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrand) EXPECT() *MockBrandMockRecorder {
	return m.recorder
}

// GetbyBrandid mocks base method
func (m *MockBrand) GetbyBrandid(id int) (model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetbyBrandid", id)
	ret0, _ := ret[0].(model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetbyBrandid indicates an expected call of GetbyBrandid
func (mr *MockBrandMockRecorder) GetbyBrandid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetbyBrandid", reflect.TypeOf((*MockBrand)(nil).GetbyBrandid), id)
}

// CreateB mocks base method
func (m *MockBrand) CreateB(p model.Brand) (model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateB", p)
	ret0, _ := ret[0].(model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateB indicates an expected call of CreateB
func (mr *MockBrandMockRecorder) CreateB(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateB", reflect.TypeOf((*MockBrand)(nil).CreateB), p)
}

// Check mocks base method
func (m *MockBrand) Check(bname string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", bname)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockBrandMockRecorder) Check(bname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockBrand)(nil).Check), bname)
}

// MockProduct is a mock of Product interface
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// GetbyProductid mocks base method
func (m *MockProduct) GetbyProductid(id int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetbyProductid", id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetbyProductid indicates an expected call of GetbyProductid
func (mr *MockProductMockRecorder) GetbyProductid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetbyProductid", reflect.TypeOf((*MockProduct)(nil).GetbyProductid), id)
}

// CreateP mocks base method
func (m *MockProduct) CreateP(p model.Product) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateP", p)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateP indicates an expected call of CreateP
func (mr *MockProductMockRecorder) CreateP(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateP", reflect.TypeOf((*MockProduct)(nil).CreateP), p)
}
